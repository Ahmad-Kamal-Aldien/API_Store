// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Store.Customer.Repository.Contexts;

#nullable disable

namespace Store.Customer.Repository.Data.Migrations
{
    [DbContext(typeof(StoreDBContext))]
    [Migration("20240930153623_addbrandandtypeandproduct")]
    partial class addbrandandtypeandproduct
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Store.Customer.Core.Entity.Product", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("PictureUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int?>("productBrandid")
                        .HasColumnType("int");

                    b.Property<int?>("productTypeid")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("productBrandid");

                    b.HasIndex("productTypeid");

                    b.ToTable("Product");
                });

            modelBuilder.Entity("Store.Customer.Core.Entity.ProductBrand", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("ProductBrand");
                });

            modelBuilder.Entity("Store.Customer.Core.Entity.ProductType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("ProductType");
                });

            modelBuilder.Entity("Store.Customer.Core.Entity.Product", b =>
                {
                    b.HasOne("Store.Customer.Core.Entity.ProductBrand", "productBrand")
                        .WithMany()
                        .HasForeignKey("productBrandid")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("Store.Customer.Core.Entity.ProductType", "productType")
                        .WithMany()
                        .HasForeignKey("productTypeid")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("productBrand");

                    b.Navigation("productType");
                });
#pragma warning restore 612, 618
        }
    }
}
